        namespace TestRepository
    {
        using System;
        using Framework; // Contains definition of the TestPropertyDataType class
        /*
         *******************************************************************************************************
         * See: http://stackoverflow.com/questions/1097090/how-do-i-map-custom-types-in-linq-to-sql
         * 
         * Expanding on the private/public interface mentioned here and using the fact that Linq auto generates a 
         * public/private pairing with the getter/setter code, I mutated the Linq gneerated code to 
         * quietly convert from type System.Byte to the custom type, TestPropertyDataType.
         * 
         * Original code as generated by Linq to SQL which I lifted from the file: TestRepository.designer.cs
         * *****************************************************************************************************
         * [global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TEST_ACTION_PROPERTIES")]
         * public partial class TestActionPropertyMetadata : INotifyPropertyChanging, INotifyPropertyChanged
         * {
         *     // <Lots of Linq-generated code>
         *         
         *     private TestPropertyDataType _DataType;
         * 
         *     // more Linq-generated code>
         *     
         *     #region Extensibility Method Definitions
         *     partial void OnDataTypeChanging(TestPropertyDataType value);
         *     #endregion
         *     
         *     // <Lots more Linq-generated code>
         * 
         *     [global::System.Data.Linq.Mapping.ColumnAttribute(Name="DATA_TYPE", Storage="_DataType", DbType="TinyInt NOT NULL", CanBeNull=false)]
         *     public TestPropertyDataType DataType
         *     {
         *         get
         *         {
         *             return this._DataType;
         *         }
         *         set
         *         {
         *             if ((this._DataType != value))
         *             {
         *                 this.OnDataTypeChanging(value);
         *                 this.SendPropertyChanging();
         *                 this._DataType = value;
         *                 this.SendPropertyChanged("DataType");
         *                 this.OnDataTypeChanged();
         *             }
         *         }
         *     }
         * }
         * *****************************************************************************************************
         */
        public partial class TestActionPropertyMetadata
        {
            private byte _DataType;
            partial void OnDataTypeChanging(TestPropertyDataType value);
            [global::System.Data.Linq.Mapping.ColumnAttribute(Name = "DATA_TYPE", Storage = "_DataType", DbType = "TinyInt NOT NULL", CanBeNull = false)]
            public TestPropertyDataType DataType
            {
                get
                {
                    return TestPropertyDataType.findByOrdinal(this._DataType);
                }
                set
                {
                    if ((this.DataType != value))
                    {
                        this.OnDataTypeChanging(value);
                        this.SendPropertyChanging();
                        this._DataType = (byte)value.Ordinal;
                        this.SendPropertyChanged("DataType");
                        this.OnDataTypeChanged();
                    }
                }
            }
        }
    }
