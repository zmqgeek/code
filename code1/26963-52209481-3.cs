    //------------------------------------------------------------------------------
    // <auto-generated>
    //     This code was generated by a tool.
    //
    //     Changes to this file may cause incorrect behavior and will be lost if
    //     the code is regenerated.
    // </auto-generated>
    //------------------------------------------------------------------------------
    
    using System;
    using System.Linq;
    using System.Collections.Generic;
    
    namespace YourName.Space
    {
        public class ResponseStatusCode
        {
    //---------------------------------------------------------------------------------------------------
    // V A L U E S _ L I S T 
    //---------------------------------------------------------------------------------------------------
    
    
    
            ///<summary>
            /// "The response was successful."
            ///</summary>
            public static readonly ResponseStatusCode SUCCESS = new ResponseStatusCode(){ Name = "SUCCESS", Description = "The response was successful."};
    
    
            ///<summary>
            /// "The request was not successful."
            ///</summary>
            public static readonly ResponseStatusCode NON_SUCCESS = new ResponseStatusCode(){ Name = "NON_SUCCESS", Description = "The request was not successful."};
    
    
            ///<summary>
            /// "The resource requested has been discontinued and can no longer be accessed."
            ///</summary>
            public static readonly ResponseStatusCode RESOURCE_IS_DISCONTINUED = new ResponseStatusCode(){ Name = "RESOURCE_IS_DISCONTINUED", Description = "The resource requested has been discontinued and can no longer be accessed."};
    
    
    		private static List<ResponseStatusCode> _list { get; set; } = null;
    		public static List<ResponseStatusCode> ToList()
    		{
    			if (_list == null)
    			{
    				_list = typeof(ResponseStatusCode).GetFields().Where(x => x.IsStatic && x.IsPublic && x.FieldType == typeof(ResponseStatusCode))
    					.Select(x => x.GetValue(null)).OfType<ResponseStatusCode>().ToList();
    			}
    
    			return _list;
    		}
    
    		public static List<ResponseStatusCode> Values()
    		{
    			return ToList();
    		}
    
            /// <summary>
            /// Returns the enum value based on the matching Name of the enum. Case-insensitive search.
            /// </summary>
            /// <param name="key"></param>
            /// <returns></returns>
            public static ResponseStatusCode ValueOf(string key)
    		{
                return ToList().FirstOrDefault(x => string.Compare(x.Name, key, true) == 0);
            }
    
    
    //---------------------------------------------------------------------------------------------------
    // I N S T A N C E _ D E F I N I T I O N 
    //---------------------------------------------------------------------------------------------------		
            public string Name { get; set; }
            public string Description { get; set; }
            public override string ToString() { return this.Name; }
    
    		/// <summary>
            /// Implcitly converts to string.
            /// </summary>
            /// <param name="d"></param>
            public static implicit operator string(ResponseStatusCode d)
            {
                return d.ToString();
            }
    
            /// <summary>
            /// Compares based on the == method. Handles nulls gracefully.
            /// </summary>
            /// <param name="a"></param>
            /// <param name="b"></param>
            /// <returns></returns>
            public static bool operator !=(ResponseStatusCode a, ResponseStatusCode b)
            {
                return !(a == b);
            }
    
            /// <summary>
            /// Compares based on the .Equals method. Handles nulls gracefully.
            /// </summary>
            /// <param name="a"></param>
            /// <param name="b"></param>
            /// <returns></returns>
            public static bool operator ==(ResponseStatusCode a, ResponseStatusCode b)
            {
                return a?.ToString() == b?.ToString();
            }
    
            /// <summary>
            /// Compares based on the .ToString() method
            /// </summary>
            /// <param name="o"></param>
            /// <returns></returns>
            public override bool Equals(object o)
            {
                return this.ToString() == o?.ToString();
            }
    
            /// <summary>
            /// Compares based on the .Name property
            /// </summary>
            /// <returns></returns>
            public override int GetHashCode()
            {
                return this.Name.GetHashCode();
            }
        }
    }
    
